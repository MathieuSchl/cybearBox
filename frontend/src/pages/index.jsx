import axios from "axios";
import Head from "next/head";
import Image from "next/image";
import { useEffect, useState } from "react";

export default function Home({}) {
	const [startTime, setStartTime] = useState(null);
	const [endTime, setEndTime] = useState(null);
	const [host, setHost] = useState(null);
	const [scanType, setScanType] = useState(null);
	const [protocol, setProtocol] = useState(null);
	const [scannedPorts, setScannedPorts] = useState([]);
	const [totalScannedPorts, setTotalScannedPorts] = useState(null);
	const [closedPorts, setClosedPorts] = useState([]);
	const [totalClosedPorts, setTotalClosedPorts] = useState(null);

	const fetchData = () => {
		axios.get("/fichier_ethernet.xml").then((response) => {
			const parser = new DOMParser();
			const xmlDoc = parser.parseFromString(response.data, "text/xml");

			setStartTime(
				new Date(
					Number.parseInt(
						xmlDoc.getElementsByTagName("host")[0].getAttribute("starttime"),
						10
					) * 1000
				).toUTCString()
			);
			setEndTime(
				new Date(
					Number.parseInt(
						xmlDoc.getElementsByTagName("host")[0].getAttribute("endtime"),
						10
					) * 1000
				).toUTCString()
			);
			setHost(
				xmlDoc
					.getElementsByTagName("host")[0]
					.childNodes[2].getAttribute("addr")
			);
			setScanType(
				xmlDoc.getElementsByTagName("scaninfo")[0].getAttribute("type")
			);
			setProtocol(
				xmlDoc.getElementsByTagName("scaninfo")[0].getAttribute("protocol")
			);
			setScannedPorts(
				xmlDoc
					.getElementsByTagName("scaninfo")[0]
					.getAttribute("services")
					.split(",")
			);
			setTotalScannedPorts(
				xmlDoc.getElementsByTagName("scaninfo")[0].getAttribute("numservices")
			);
			setClosedPorts(
				[...xmlDoc.getElementsByTagName("ports")[0].childNodes]
					.filter((element) => {
						try {
							if (element.getAttribute("state") == "closed") {
								setTotalClosedPorts(element.getAttribute("count"));
								return element.childNodes[1].getAttribute("ports").split(",");
							}
						} catch (e) {}
					})[0]
					.childNodes[1].getAttribute("ports")
					.split(",")
			);
		});
	};

	useEffect(() => {
		fetchData();
		setInterval(() => {
			fetchData();
		}, 30000);
	}, []);
	return (
		<>
			<Head>
				<title>Cybear</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<main>
				<div className="flex items-center justify-evenly py-8 border-b-2 border-black">
					<Image
						src="/favicon.ico"
						height={100}
						width={100}
						alt="Cybear logo"
						className="border-2 border-black rounded-xl"
					/>
					<h1 className="text-center font-extrabold text-6xl">
						Welcome to Cybear
					</h1>
				</div>
				<div className="mt-5 flex flex-col gap-2 ml-4">
					<h2 className="text-xl font-bold ml-3">Scan informations</h2>
					<p>
						<span className="font-bold mr-2">Started at:</span>
						{startTime ?? ""}{" "}
					</p>
					<p>
						<span className="font-bold mr-2">Ended at:</span> {endTime ?? ""}
					</p>
					<p>
						<span className="font-bold mr-2">Host: </span> {host ?? ""}
					</p>
					<p>
						<span className="font-bold mr-2">Scan type: </span>
						{`${scanType}`.toUpperCase() ?? ""}
					</p>
					<p>
						<span className="font-bold mr-2">Protocol: </span>
						{`${protocol}`.toUpperCase() ?? ""}
					</p>
					<p>
						<span className="font-bold mr-2">Scanned ports: </span>
						{scannedPorts.map((port, index) => {
							return (
								<>
									<span className="mr-2">{port}</span>
									{index % 10 == 9 ? <br /> : <></>}
								</>
							);
						})}
						<br />
						<span>Total: {totalScannedPorts}</span>
					</p>
					<p>
						<span className="font-bold mr-2"> Closed ports: </span>
						{closedPorts.map((port, index) => {
							return (
								<>
									<span className="mr-2">{port}</span>
									{index % 10 == 9 ? <br /> : <></>}
								</>
							);
						})}
						<br />
						<span>
							Total: {totalClosedPorts}/{totalScannedPorts}
							{` (${(totalClosedPorts / totalScannedPorts) * 100}%)`}
						</span>
					</p>
					<p>
						<span className="font-bold mr-2"> open ports: </span>
					</p>
				</div>
			</main>
		</>
	);
}
